# Documentation for Parallelized Random Dataset Generation Script

This documentation explains the structure and functionality of the script, which generates random datasets based on specified parameters. The script supports both uniform and Gaussian distributions, uses parallelism for efficiency, and computes descriptive statistics.

---

## **Overview**

### **Purpose:**
The script generates synthetic datasets with user-defined parameters for simulation, modeling, or training purposes. It:
1. Allows for flexible customization of sample size, decimal precision, and data distribution.
2. Utilizes parallel processing for efficiency.
3. Saves datasets and metrics (e.g., skewness, kurtosis) as CSV files.

### **Features:**
- Supports **uniform** and **Gaussian** distributions.
- Parallelized generation for faster computation.
- Computes summary statistics and additional metrics like skewness and kurtosis.
- Saves output in organized, timestamped CSV files.

---

## **Key Components**

### **Dependencies**
- **NumPy:** For numerical operations.
- **Pandas:** For data handling and CSV management.
- **Scipy.stats:** For skewness and kurtosis calculations.
- **Statistics:** For computing mode.
- **Joblib:** For parallel processing.
- **Argparse:** For command-line arguments.
- **Logging:** For detailed execution logs.

### **Command-line Arguments**
- `--samples`: Number of data samples to generate (default: 20,000).
- `--precision`: Decimal precision for values (default: 2).
- `--distribution`: Data distribution type, either "uniform" or "gaussian" (default: "uniform").

Example:
```bash
python generate_dataset.py --samples 10000 --precision 3 --distribution gaussian
```

---

## **Detailed Steps**

### **1. Parse Command-line Arguments**
The script uses `argparse` to allow customization of parameters. It validates the inputs and provides default values for missing arguments.

### **2. Configure Logging**
Logs are written to both a console and a file (`data_generation.log`) for easy debugging and tracking.

### **3. Define Parameter Ranges**
- `PARAMETER_RANGES` contains the lower and upper bounds for each parameter:
  ```python
  PARAMETER_RANGES = {
      "Frequency (GHz)": (0.5, 5.0),
      "W1 (mm)": (0.1, 5.0),
      "L1 (mm)": (0.5, 10.0),
      ...
  }
  ```

### **4. Generate Data in Parallel**
The `generate_data_parallel()` function generates random values for each parameter.

- **Uniform Distribution:** Uses `np.random.uniform(low, high, num_samples)`.
- **Gaussian Distribution:**
  - Mean: `(low + high) / 2`.
  - Standard deviation: `(high - low) / 6` (for 99.7% values within range).
  - Out-of-range values are clipped to the parameter range.

Parallelism is achieved using `joblib.Parallel`.

Example:
```python
results = Parallel(n_jobs=-1)(
    delayed(generate_param)(param, low, high) for param, (low, high) in parameter_ranges.items()
)
```

### **5. Create and Save the Dataset**
The generated data is stored in a Pandas DataFrame. An `ID` column is added to uniquely identify samples. The dataset is saved as `generated_input_dataset.csv`.

### **6. Compute Summary Statistics**
The `DataFrame.describe()` method is used to calculate standard summary metrics like mean, min, max, and standard deviation. The results are saved as `summary_statistics.csv`.

### **7. Compute Additional Metrics**
The `compute_additional_metrics()` function calculates:
- **Skewness:** Measure of symmetry in data distribution.
- **Kurtosis:** Measure of data "tailedness."
- **Mode:** Most frequent value.

The metrics are saved as `additional_metrics.csv`.

### **8. Error Handling**
- Invalid sample size or parameter ranges raise exceptions.
- File save errors are logged with detailed information.

---

## **Output Files**

1. **Generated Dataset:**
   File: `generated_input_dataset.csv`
   - Contains generated samples with specified parameters.
   - Columns: `ID`, `Frequency (GHz)`, `W1 (mm)`, etc.

2. **Summary Statistics:**
   File: `summary_statistics.csv`
   - Includes count, mean, std, min, max, and quantiles for each parameter.

3. **Additional Metrics:**
   File: `additional_metrics.csv`
   - Includes skewness, kurtosis, and mode for each parameter.

---

## **Sample Execution Logs**
Example log messages generated by the script:
```
2025-01-25 12:00:01 - INFO - Dataset with 20000 samples generated and saved to 'generated_input_dataset.csv'.
2025-01-25 12:00:02 - INFO - Summary statistics saved to 'summary_statistics.csv'.
2025-01-25 12:00:03 - INFO - Additional metrics saved to 'additional_metrics.csv'.
2025-01-25 12:00:03 - INFO - Data generation complete with precision and accuracy maintained.
```

---

## **Notes **

1. **Parallel Processing:**
   The script leverages parallelism for faster data generation, especially with large sample sizes.

2. **Gaussian Clipping:**
   Gaussian values are clipped to avoid exceeding parameter bounds, which might lead to distribution skew.

3. **Precision and Customization:**
   Users can control decimal precision, sample size, and the type of distribution via command-line arguments.

4. **Validation:**
   The script ensures parameter ranges are valid and sample sizes are greater than zero.

5. **File Management:**
   Output files are timestamped for traceability and stored in the working directory.
